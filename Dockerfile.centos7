FROM centos/s2i-base-centos7

MAINTAINER Subin Modeel <smodeel@redhat.com>

USER root

## LIBRARY_VERSION comes from template
ENV BAZEL_VERSION=$LIBRARY_VERSION

ARG PYTHON_VERSION=3.6
## ARG TF_PACKAGE=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.7.0-cp36-cp36m-linux_x86_64.whl
ARG TF_PACKAGE=https://tensorflow.pypi.thoth-station.ninja/index/centos7/jemalloc/simple/tensorflow/tensorflow-1.9.0-cp27-cp27mu-manylinux1_x86_64.whl


ENV PYTHON_VERSION=$PYTHON_VERSION
ENV TF_PACKAGE $TF_PACKAGE

ENV TEST_CMD="import tensorflow as tf ; a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a') ; \
b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b') ; c = tf.matmul(a, b) ; \
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True)) ;print(sess.run(c))"

# Not essential, but wise to set the lang
# Note: Users with other languages should set this in their derivative image
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL=""
ENV PYTHONIOENCODING UTF-8
ENV NB_USER=default
ENV NB_UID=1001
ENV PYTHON_BIN_PATH=/usr/bin/python 

ENV PYTHON_LIB_PATH=/usr/lib64/python$PYTHON_VERSION/site-packages
ENV JAVA_HOME=/usr/lib/jvm/java-1.8.0
ENV PATH=/home/default/.local/bin:/opt/app-root/src/.local/bin/:$PATH
COPY ./loop.sh /utils/
RUN chmod +x /utils/loop.sh

COPY ./test.py /utils/
RUN chmod +x /utils/test.py

## sourcestrategy doesn't work because git clone doesnt work here

# https://github.com/tensorflow/serving/issues/1015
# https://github.com/tensorflow/tensorflow/issues/14573
# https://github.com/tensorflow/tensorflow/issues/25865
# https://github.com/tensorflow/tensorflow/issues/1530

RUN yum install -y yum-utils tar tree git curl wget \
    && yum install -y vim gcc gcc-c++ glibc-devel openssl-devel perf \
    && yum install -y which findutils x86info cpuid dmidecode procps \
    && prepare-yum-repositories rhel-server-rhscl-7-rpms \
    && if [ "$PYTHON_VERSION" = "2.7" ] ; then yum install -y tkinter scl-utils python27 python-devel python27-python-devel && scl enable python27 bash ; fi \
    && if [[ $PYTHON_VERSION == 3.* ]] ; then yum install -y scl-utils rh-python${PYTHON_VERSION//.} rh-python${PYTHON_VERSION//.}-python-pip rh-python${PYTHON_VERSION//.}-scldevel && scl enable rh-python${PYTHON_VERSION//.} bash  ; fi \
	&& curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py" \
    && if [ "$PYTHON_VERSION" = "2.7" ] ; then python$PYTHON_VERSION get-pip.py ; fi \
    && if [[ $PYTHON_VERSION == 3.* ]] ; then ls -l /opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/lib64/ && export LD_LIBRARY_PATH="/opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" && echo $LD_LIBRARY_PATH && export PYTHON_LIB_PATH=/opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/lib/python${PYTHON_VERSION}/site-packages && echo $PYTHON_LIB_PATH && rm -fr /usr/bin/python && ln -s /opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/bin/python${PYTHON_VERSION} /usr/bin/python && ls -l /usr/bin/python* && python get-pip.py && rm -fr /usr/bin/pip && ln -s /opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/bin/pip /usr/bin/pip; fi \
    && pip install --upgrade pip==19.2.1 \
    && pip --no-cache-dir install ${TF_PACKAGE}

RUN pip install Pillow



USER 1001
# Make the default PWD somewhere that the user can write. This is
# useful when connecting with 'oc run' and starting a 'spark-shell',
# which will likely try to create files and directories in PWD and
# error out if it cannot.

## Adding application code into the image

ENV APPROOT="/opt/app-root/src/tensorflowapp-sample"  VERSION="1"
RUN echo "---> Installing application source"
COPY ["tensorflowapp-sample", "${APPROOT}"]

COPY ["requirements.txt", "${APPROOT}"]
WORKDIR $APPROOT


RUN echo "---> Create output dir: /opt/app-root/src/output"
RUN mkdir /opt/app-root/src/output

RUN echo "---> Create input dir: /opt/app-root/src/input"
RUN mkdir /opt/app-root/src/input
COPY ["input", "/opt/app-root/src/input"]


RUN ls -la /opt/app-root/src/input


RUN pip install -r requirements.txt --default-timeout=100 --user

RUN echo "---> Training the model"
RUN exec python /opt/app-root/src/tensorflowapp-sample/tensorflowapp-training.py --prefix mnist- --saved_model_name mnist_saved_model /opt/app-root/src/input /opt/app-root/src/output

RUN echo "---> Training complete"
RUN echo "---> Model location: /opt/app-root/src/output/mnist_saved_model/1/"
## RUN /utils/loop.sh

# TODO: Set the default CMD for the image
CMD ["/usr/libexec/s2i/usage"]


