FROM centos/s2i-base-centos7

MAINTAINER Parul Singh <parsingh@redhat.com>

### Setup user for build execution and application runtime

ENV APPROOT=/opt/app-root  VERSION="1"
ENV PATH=${APPROOT}/bin:${PATH} HOME=${APPROOT}

COPY ./loop.sh /utils/
RUN chmod +x /utils/loop.sh

COPY ./.s2i/bin/ /usr/libexec/s2i
COPY ./.s2i/bin/uid_entrypoint  ${APP_ROOT}/bin/

RUN chmod -R u+x ${APP_ROOT}/bin && \
    chgrp -R 0 ${APP_ROOT} && \
    chmod -R g=u ${APP_ROOT} /etc/passwd


## LIBRARY_VERSION comes from template
ENV BAZEL_VERSION=$LIBRARY_VERSION

ARG PYTHON_VERSION=3.6
ARG TF_PACKAGE=https://tensorflow.pypi.thoth-station.ninja/index/centos7/jemalloc/simple/tensorflow/tensorflow-1.9.0-cp27-cp27mu-manylinux1_x86_64.whl
ENV PYTHON_VERSION=$PYTHON_VERSION
ENV TF_PACKAGE=$TF_PACKAGE

ENV TEST_CMD="import tensorflow as tf ; a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a') ; \
b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b') ; c = tf.matmul(a, b) ; \
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True)) ;print(sess.run(c))"

# Not essential, but wise to set the lang
# Note: Users with other languages should set this in their derivative image
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL=""
ENV PYTHONIOENCODING UTF-8
ENV NB_USER=default
ENV NB_UID=10001
ENV PYTHON_BIN_PATH=/usr/bin/python 

ENV PYTHON_LIB_PATH=/usr/lib64/python$PYTHON_VERSION/site-packages
ENV JAVA_HOME=/usr/lib/jvm/java-1.8.0
ENV PATH=/home/default/.local/bin:/opt/app-root/src/.local/bin/:$PATH

## sourcestrategy doesn't work because git clone doesnt work here

# https://github.com/tensorflow/serving/issues/1015
# https://github.com/tensorflow/tensorflow/issues/14573
# https://github.com/tensorflow/tensorflow/issues/25865
# https://github.com/tensorflow/tensorflow/issues/1530

RUN yum install -y yum-utils tar tree git curl wget \
    && yum install -y vim gcc gcc-c++ glibc-devel openssl-devel perf \
    && yum install -y which findutils x86info cpuid dmidecode procps \
    && prepare-yum-repositories rhel-server-rhscl-7-rpms \
    && if [ "$PYTHON_VERSION" = "2.7" ] ; then yum install -y tkinter scl-utils python27 python-devel python27-python-devel && scl enable python27 bash ; fi \
    && if [[ $PYTHON_VERSION == 3.* ]] ; then yum install -y scl-utils rh-python${PYTHON_VERSION//.} rh-python${PYTHON_VERSION//.}-python-pip rh-python${PYTHON_VERSION//.}-scldevel && scl enable rh-python${PYTHON_VERSION//.} bash  ; fi \
	&& curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py" \
    && if [ "$PYTHON_VERSION" = "2.7" ] ; then python$PYTHON_VERSION get-pip.py ; fi \
    && if [[ $PYTHON_VERSION == 3.* ]] ; then ls -l /opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/lib64/ && export LD_LIBRARY_PATH="/opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/lib64/:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" && echo $LD_LIBRARY_PATH && export PYTHON_LIB_PATH=/opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/lib/python${PYTHON_VERSION}/site-packages && echo $PYTHON_LIB_PATH && rm -fr /usr/bin/python && ln -s /opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/bin/python${PYTHON_VERSION} /usr/bin/python && ls -l /usr/bin/python* && python get-pip.py && rm -fr /usr/bin/pip && ln -s /opt/rh/rh-python${PYTHON_VERSION//.}/root/usr/bin/pip /usr/bin/pip; fi \
    && pip install --upgrade pip==19.2.1 \
    && pip --no-cache-dir install ${TF_PACKAGE}



RUN pip install chrisapp pypng numpy Pillow




## Adding application code into the image

#RUN echo "---> Installing application source"
#COPY ["tensorflowapp-sample", "${APPROOT}/src/tensorflowapp-sample"]
#COPY ["requirements.txt", "${APPROOT}/src/tensorflowapp-sample"]

#WORKDIR ${APP_ROOT}/src/tensorflowapp-sample
#RUN pip install -r requirements.txt
#RUN pip --no-cache-dir install ${TF_PACKAGE}

#RUN echo "---> Create output dir: /opt/app-root/src/output"
#RUN mkdir /opt/app-root/src/output

#RUN echo "---> Create input dir: /opt/app-root/src/input"
#RUN mkdir /opt/app-root/src/input

#COPY ["input", "/opt/app-root/src/input"]

RUN chown -R 10001:10001 /opt/app-root/src/
RUN umask 000
RUN chmod -R u+w /opt/app-root/src/
RUN chmod -R o+w /opt/app-root/src/

RUN ls -la /opt/app-root/src/

USER 10001
WORKDIR ${APP_ROOT}
ENTRYPOINT [ "uid_entrypoint" ]


